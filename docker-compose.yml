version: '3'

services:
  db:
    image: postgres:11
    command: postgres -c 'max_connections=1000'
    environment:
      - POSTGRES_DB=ab2d
      - POSTGRES_USER=ab2d
      - POSTGRES_PASSWORD=ab2d
    # Docker exposes these ports to all containers in the compose by default
    # but if you are debugging on a local machine uncomment to test connectivity or open a connection
    # to the Postgres database
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  localstack:
    image: localstack/localstack:1.0.2
    environment:
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - SERVICES=sqs
    ports:
      - '4566:4566'
    volumes:
      - tmp-volume:/opt/ab2d
    healthcheck:
      test: awslocal sqs list-queues
      interval: 10s
      timeout: 5s
      retries: 40
  build:
    image: gradle:3-openjdk-17
    working_dir: /usr/src/mymaven
    # Not necessary to run mvn package since we anticipate that project
    # has already built so we don't need to run this command
    command: ls /usr/src/mymaven/*/target && ls /root/.m2/repository
    volumes:
      - "${PWD}:/usr/src/mymaven"
      - "${HOME}/.m2:/root/.m2"
  contracts:
    build:
      context: ./
    environment:
      - AB2D_DB_HOST=db
      - AB2D_DB_PORT=5432
      - AB2D_DB_DATABASE=ab2d
      - AB2D_DB_SSL_MODE=allow
      - AB2D_DB_USER=ab2d
      - AB2D_DB_PASSWORD=ab2d
      - AB2D_CLAIMS_SKIP_BILLABLE_PERIOD_CHECK=true
      - AB2D_V2_ENABLED=true
      - HPMS_INGEST_SCHEDULE=0 0/1 * * * ?
      - AWS_SQS_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=invalid
      - AWS_SECRET_KEY=invalid
      - HPMS_AUTH_KEY_ID="${HPMS_AUTH_KEY_ID}"
      - HPMS_AUTH_KEY_SECRET="${HPMS_AUTH_KEY_SECRET}"
      - AB2D_HPMS_URL=${AB2D_HPMS_URL}
    ports:
      - '8070:8070'
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
    volumes:
      - tmp-volume:/opt/ab2d

# This needs a shared volume so that both the API and worker module can access the ndjson files being generated
volumes:
  tmp-volume:
    driver: local
    driver_opts:
      type: none
      device: /opt/ab2d
      o: bind
