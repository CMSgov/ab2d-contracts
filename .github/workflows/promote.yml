name: promote-contracts

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - sbx
          - prod_test
          - prod

permissions:
  contents: read
  id-token: write

jobs:
  promote:
    runs-on: self-hosted
    steps:
      - name: Set environment
        id: set-env
        run: echo "env_name=${{ inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Define source/destination config
        id: repos
        run: |
          case "${{ inputs.environment }}" in
            test)
              echo "SOURCE_ENV=test" >> $GITHUB_OUTPUT
              echo "SOURCE_REPO=ab2d-impl-services" >> $GITHUB_OUTPUT
              echo "DEST_REPO=ab2d-sbx-services" >> $GITHUB_OUTPUT
              ;;
            prod_test)
              echo "SOURCE_ENV=test" >> $GITHUB_OUTPUT
              echo "SOURCE_REPO=ab2d-impl-services" >> $GITHUB_OUTPUT
              echo "DEST_REPO=ab2d-prod-test-services" >> $GITHUB_OUTPUT
              ;;
            prod)
              echo "SOURCE_ENV=test" >> $GITHUB_OUTPUT
              echo "SOURCE_REPO=ab2d-impl-services" >> $GITHUB_OUTPUT
              echo "DEST_REPO=ab2d-prod-services" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "TAG_NAME=contracts-service" >> $GITHUB_ENV

      - name: Authenticate to source account (pull)
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets[format('{0}_ACCOUNT', steps.repos.outputs.SOURCE_ENV)] }}:role/delegatedadmin/developer/ab2d-${{ steps.repos.outputs.SOURCE_ENV }}-github-actions

      - name: Pull image from source ECR
        id: pull-image
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          SOURCE_REPO: ${{ steps.repos.outputs.SOURCE_REPO }}
          TAG_NAME: contracts-service
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          SRC_ECR="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker login --username AWS --password-stdin $SRC_ECR <<< $(aws ecr get-login-password)
          echo "Pulling $SRC_ECR/$SOURCE_REPO:$TAG_NAME"
          docker pull "$SRC_ECR/$SOURCE_REPO:$TAG_NAME"
          echo "IMAGE=$SRC_ECR/$SOURCE_REPO:$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Authenticate to destination account (push)
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets[format('{0}_ACCOUNT', steps.set-env.outputs.env_name)] }}:role/delegatedadmin/developer/ab2d-${{ steps.set-env.outputs.env_name }}-github-actions
      
      - name: Tag and push image to destination ECR
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          DEST_REPO: ${{ steps.repos.outputs.DEST_REPO }}
          TAG_NAME: contracts-service
          IMAGE: ${{ steps.pull-image.outputs.IMAGE }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          DEST_ECR="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker login --username AWS --password-stdin $DEST_ECR <<< $(aws ecr get-login-password)
          echo "Tagging and pushing image to $DEST_ECR/$DEST_REPO:$TAG_NAME"
          docker tag "$IMAGE" "$DEST_ECR/$DEST_REPO:$TAG_NAME"
          docker push "$DEST_ECR/$DEST_REPO:$TAG_NAME"
