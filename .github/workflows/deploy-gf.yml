name: Deploy contracts GF
run-name: deploy-gf ${{ inputs.environment }}

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tag_suffix:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: AB2D environment
        required: true
        type: choice
        options:
          - dev
          - test
          - sandbox
          - prod
      tag_suffix:
        description: Docker tag suffix
        required: true
        type: string

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-ab2d-contracts-${{github.run_id}}-${{github.run_attempt}}
    env:
      AWS_ACCOUNT: ${{contains(fromJSON('["dev", "test"]'), inputs.environment) && secrets.GF_NON_PROD_ACCOUNT || secrets.GF_PROD_ACCOUNT}}
      AB2D_ENV: ${{ inputs.environment }}
    steps:
      - uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/delegatedadmin/developer/ab2d-${{ env.AB2D_ENV }}-github-actions
      - name: Deploy ECS service to run on latest image in ECR
        env:
          DEPLOYMENT_ENV: ab2d-${{ env.AB2D_ENV }}-microservice-cluster
        run: |
          echo "Deploying contracts service"
          aws ecs update-service --cluster "$DEPLOYMENT_ENV" --service ab2d-contracts-service --force-new-deployment > /dev/null
          aws ecs wait services-stable --cluster "$DEPLOYMENT_ENV" --services ab2d-contracts-service
